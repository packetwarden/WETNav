// Enhanced SEO content for critical Sysmon events
// Author: Hari Patel, Cybersecurity Researcher

import { EnhancedEventContent } from './top-events';

export const sysmonEventsContent: Record<string, EnhancedEventContent> = {
  // Sysmon Event 1 - Process Creation
  "1": {
    quickAnswer: "Sysmon Event 1 logs detailed process creation activity including command-line parameters, file hashes, parent process information, and digital signatures. This event is more comprehensive than Windows Event 4688, making it essential for malware detection, threat hunting, and forensic investigations.",
    detailedExplanation: "Sysmon Event 1 provides the most comprehensive visibility into process execution on Windows systems, surpassing native Windows Event 4688 with additional critical details that security analysts depend on for threat detection and investigation. Every time a process starts, this event captures the full command line with all parameters, multiple cryptographic hashes of the executable (MD5, SHA256, IMPHASH), the parent process and its command line, the user account context, digital signature information, and the current working directory. These rich details enable security teams to detect malicious process execution through multiple methods: suspicious command-line patterns, known malicious file hashes, unsigned or invalidly signed executables, unusual parent-child process relationships, and processes launched from suspect directories. The parent process information is particularly valuable for detecting process injection, DLL side-loading, and legitimate binaries being abused to launch malicious code. For example, attackers often inject malicious code into legitimate processes like explorer.exe or svchost.exe, which becomes visible when these processes spawn unexpected child processes. The hash values enable immediate malware identification through threat intelligence feeds and can identify file modifications even when filenames remain the same. Integration points include automatically checking process hashes against VirusTotal or internal threat intelligence platforms, comparing command-line patterns against known attack frameworks like Cobalt Strike or Metasploit, and baselining normal parent-child relationships to identify deviations.",
    securityImplications: [
      "PowerShell execution with encoded commands or IEX indicates malware or exploitation frameworks",
      "Unsigned executables or processes with invalid signatures often signal malware execution",
      "Process trees showing Office apps spawning scripting engines reveal macro-based malware",
      "Process hollowing attacks visible through PID recycling and unexpected parent-child relationships",
      "Hash values enable instant malware identification and historical analysis of when malware first appeared"
    ],
    detectionStrategies: "Configure Sysmon to log all process creation events and forward to centralized SIEM for correlation and analysis. Create detection rules for suspicious command-line patterns including base64 encoded commands, download utilities (certutil, bitsadmin), and remote execution tools. Implement hash-based detection by integrating process hashes with threat intelligence feeds and flagging unknown hashes from critical systems. Build baselines of legitimate parent-child process relationships and alert on violations such as Office applications spawning cmd.exe or PowerShell. Monitor for unsigned executables or those with revoked certificates running in your environment. Track processes executing from user-writable directories especially AppData, Temp, Downloads. Correlate with network connections (Event 3) to identify command-and-control beaconing. Sample Sysmon configuration files and SIEM correlation rules will be provided in future updates.",
    realWorldExamples: [
      "Emotet malware execution chain visible in Sysmon: winword.exe → powershell.exe with encoded command → cmd.exe → malicious DLL via rundll32",
      "Cobalt Strike beacon deployment shows explorer.exe spawning suspicious processes with specific IMPHASH values unique to Cobalt Strike artifacts",
      "LockBit ransomware execution captured in Sysmon Event 1 with distinctive command-line parameters for encryption and network share access"
    ],
    relatedEvents: ["5", "7", "10", "4688"],
    comparisonNote: "Sysmon Event 1 is superior to Windows Event 4688. Sysmon provides hashes, signature status, parent command line, and IMPHASH - all missing from 4688. Use Sysmon when possible."
  },

  // Sysmon Event 3 - Network Connection
  "3": {
    quickAnswer: "Sysmon Event 3 logs all TCP and UDP network connections initiated by processes, recording source and destination IPs, ports, and the process responsible. This event is critical for detecting command-and-control communications, data exfiltration, and lateral movement across networks.",
    detailedExplanation: "Sysmon Event 3 captures every network connection made by processes on the monitored system, providing visibility into outbound and inbound communications that native Windows logging doesn't offer. This event records the initiating process name and ID, the source and destination IP addresses and ports, protocol (TCP or UDP), and whether the connection was initiated or received. This detailed network telemetry enables security analysts to detect malware beaconing to command-and-control servers, identify data exfiltration attempts, monitor lateral movement across the network, and discover unauthorized network services running on endpoints. The combination of process-level attribution with network connection details is powerful for threat hunting - you can see exactly which executable is communicating with external infrastructure or internal systems. For instance, when a document viewer like Adobe Reader suddenly initiates network connections to unknown IP addresses, it likely indicates exploitation or embedded malware. The event is invaluable for detecting living-off-the-land techniques where legitimate system utilities like PowerShell, certutil, or bitsadmin are abused to communicate with attacker infrastructure. By correlating Event 3 with process creation (Event 1) and file creation (Event 11), analysts can trace the complete attack lifecycle from initial execution through network communication to file system changes. Advanced threat hunters use Event 3 to identify beaconing patterns characteristic of specific malware families, detect DNS tunneling through unusual port 53 traffic patterns, and spot data exfiltration through large uploads to cloud storage services or unknown destinations.",
    securityImplications: [
      "Connections to known malicious IPs or suspicious foreign countries from business applications indicate compromise",
      "Document viewers or Office applications making network connections suggest exploitation or malicious macros",
      "Regular beaconing patterns (connections every N seconds/minutes) reveal command-and-control communication",
      "Connections from PowerShell or scripting engines to internet IPs show malware or attacker activity",
      "Internal lateral movement via SMB (port 445) or RDP (port 3389) from user workstations indicates spreading"
    ],
    detectionStrategies: "Implement network connection baselining to understand normal communication patterns for applications in your environment. Alert on network connections from unusual processes, especially document viewers, media players, or other applications that shouldn't initiate connections. Integrate threat intelligence feeds to automatically flag connections to known malicious IPs, domains, and infrastructure. Monitor for beaconing behavior by analyzing connection frequency and regularity, particularly connections that occur at precise intervals characteristic of automated malware callbacks. Detect data exfiltration by tracking upload volume from client systems to external destinations, especially large transfers to newly observed domains. Flag internal lateral movement by monitoring for workstation-to-workstation connections on administrative ports like 135, 139, 445, 3389. Correlate network connections with process execution to identify which parent process spawned the communicating executable. Detailed Sysmon configuration recommendations and SIEM detection rules will be added in upcoming releases.",
    realWorldExamples: [
      "TrickBot malware generates distinctive Sysmon Event 3 patterns with connections to numerous C2 servers for redundancy",
      "APT29 (Cozy Bear) campaigns show specific beaconing patterns in Event 3 logs, connecting to compromised websites every 10-30 minutes",
      "Ransomware exfiltration visible in Event 3 as large outbound transfers from victim systems to attacker-controlled storage before encryption"
    ],
    relatedEvents: ["1", "22", "5", "11"],
    comparisonNote: "Event 3 provides process-level network visibility that native Windows lacks. Combine with Event 22 (DNS Query) to see full connection lifecycle from DNS resolution to TCP/UDP connection."
  },

  // Sysmon Event 7 - Image Loaded (DLL)
  "7": {
    quickAnswer: "Sysmon Event 7 logs DLL (Dynamic Link Library) loading into processes, capturing which DLLs are loaded, their file paths, and cryptographic hashes. This event is critical for detecting DLL injection, DLL side-loading, and reflective DLL injection used by attackers and malware.",
    detailedExplanation: "Sysmon Event 7 provides visibility into Dynamic Link Library loading, tracking when executable code in the form of DLLs is loaded into running processes. This event captures the process loading the DLL, the full path and filename of the loaded DLL, cryptographic hashes, digital signature information, and the image base address in memory. DLL loading is a fundamental Windows mechanism that threat actors frequently exploit through techniques like DLL injection (forcing malicious DLLs into legitimate processes), DLL side-loading (placing malicious DLLs alongside legitimate applications), DLL hijacking (exploiting DLL search order), and reflective DLL injection (loading DLLs directly from memory without touching disk). Security analysts use Event 7 to detect these sophisticated evasion techniques by monitoring for unsigned or invalidly signed DLLs, DLLs loading from suspicious paths like Temp directories or user profiles, unusual DLLs loading into system processes, and DLLs with known malicious hashes. The event enables detection of fileless malware that loads malicious code directly into memory, advanced persistent threats using custom DLLs for espionage, and commodity malware using process injection to hide from security tools. Because Event 7 can generate substantial log volume in active environments, security teams often configure Sysmon to exclude common legitimate DLLs while focusing on suspicious loading patterns. The event is particularly valuable when investigating memory-based attacks where traditional file-based detection fails, as it provides evidence of malicious code execution even when no malicious files exist on disk.",
    securityImplications: [
      "Unsigned DLLs or those with invalid signatures loading into system processes indicate injection attacks",
      "DLLs loading from unusual paths like AppData, Temp, or user Downloads folders suggest malware",
      "Reflective loading patterns where DLL paths don't match file system locations reveal memory-resident threats",
      "Cobalt Strike and other frameworks have distinctive DLL signatures and hash values observable in Event 7",
      "DLLs with randomized or obfuscated names loading into browsers or Office apps often indicate exploitation"
    ],
    detectionStrategies: "Configure Sysmon Event 7 filtering to exclude known-good Microsoft-signed DLLs while capturing potentially malicious loading activity. This reduces log volume while maintaining security visibility. Alert on unsigned DLLs loading into sensitive processes like lsass.exe, browsers, or Office applications. Monitor for DLLs loading from suspicious directories particularly Temp, AppData, public folders, and network shares. Create hash-based detection for known malicious DLLs and regularly update with threat intelligence. Track DLLs with suspicious naming patterns including random alphanumeric strings or names mimicking legitimate system DLLs. Correlate Event 7 with process creation (Event 1) to understand the execution chain that led to suspicious DLL loading. Implement behavioral analysis to identify processes that suddenly load unusual numbers or types of DLLs compared to baseline behavior. Comprehensive Sysmon configuration examples and filtering best practices will be provided in future documentation.",
    realWorldExamples: [
      "Cobalt Strike beacon DLLs have specific export characteristics and hash ranges visible in Sysmon Event 7 during post-exploitation",
      "Emotet malware uses DLL injection extensively, visible through Event 7 capturing unsigned DLLs loading into legitimate Windows processes",
      "APT groups employ custom espionage DLLs that side-load alongside legitimate applications, detectable through anomalous DLL loading patterns"
    ],
    relatedEvents: ["1", "8", "10", "5"],
    comparisonNote: "Event 7 should be carefully filtered to avoid overwhelming log volume. Focus on unsigned DLLs, unusual load paths, and suspicious processes. Combine with Event 8 (CreateRemoteThread) for complete injection detection."
  },

  // Sysmon Event 10 - Process Access
  "10": {
    quickAnswer: "Sysmon Event 10 logs when one process opens a handle to another process, typically for reading memory. This event is essential for detecting credential dumping attacks (like Mimikatz accessing LSASS), process injection, and various advanced attack techniques that require process memory access.",
    detailedExplanation: "Sysmon Event 10 captures process access events where one process opens a handle to another process, usually to read or manipulate its memory space. This event records the source process performing the access, the target process being accessed, the access permissions requested (such as PROCESS_VM_READ for reading memory), and both process IDs. The most critical use case for Event 10 is detecting credential theft attacks where tools like Mimikatz, ProcDump, or other credential dumpers access the Local Security Authority Subsystem Service (LSASS) process to extract plaintext passwords, password hashes, and Kerberos tickets from memory. LSASS is a high-value target for attackers because it stores authentication credentials in memory for all logged-on users, and compromising LSASS effectively gives attackers the keys to the kingdom. Event 10 also reveals process injection techniques where attackers inject malicious code into legitimate processes to evade detection, as the injection requires opening handles to target processes with specific memory access rights. Security analysts configure alerts for any non-system process accessing LSASS, as legitimate software rarely needs to read LSASS memory. The event's granted access mask field indicates what level of access was obtained, helping analysts assess the severity - for example, PROCESS_VM_READ combined with PROCESS_QUERY_INFORMATION are strong indicators of credential dumping attempts. The source process path and command line provide additional context about whether the access is from a legitimate administrative tool or an unknown executable that may be malicious.",
    securityImplications: [
      "Any non-system process accessing lsass.exe strongly indicates credential dumping attempts",
      "Process access from temporary directories or user folders suggests attacker tools like Mimikatz",
      "Access patterns with PROCESS_VM_READ permissions often precede credential theft or code injection",
      "After-hours LSASS access from workstations indicates potential adversary activity during off-peak hours",
      "Multiple process access events in rapid succession may indicate automated attack tool execution"
    ],
    detectionStrategies: "Create high-priority alerts for any process accessing lsass.exe except explicitly whitelisted system processes and security software. Monitor the source process image path and flag access from unsigned executables or those outside System32/Program Files directories. Alert on process access from known LOLBins (Living Off The Land Binaries) like rundll32, regsvr32, or PowerShell that attackers use to proxy malicious activity. Track the granted access rights in the event and prioritize access requests that include memory read permissions. Correlate Event 10 with process creation (Event 1) to understand what spawned the process attempting access. Monitor for access to other sensitive targets beyond LSASS including security software processes and privileged service accounts. Implement user behavior analytics to detect abnormal patterns such as service accounts or regular users whose processes suddenly begin accessing sensitive process memory. Detailed detection rules and baseline configuration guidance for Sysmon Event 10 will be provided in subsequent releases.",
    realWorldExamples: [
      "Mimikatz credential dumping produces distinctive Sysmon Event 10 patterns when accessing lsass.exe with specific access rights",
      "Cobalt Strike's process injection and credential theft modules generate Event 10 logs showing beacon processes accessing lsass and other targets",
      "FIN6 threat group uses procdump and other LSASS dumping tools that are clearly visible in Sysmon Event 10 during active operations"
    ],
    relatedEvents: ["1", "8", "7", "11"],
    comparisonNote: "Event 10 detects the access attempt itself. Combine with Event 11 (File Create) to catch dumped credential files, and Event 3 (Network Connection) to detect exfiltration of stolen credentials."
  },

  // Sysmon Event 11 - File Created
  "11": {
    quickAnswer: "Sysmon Event 11 logs file creation events including the creating process, file path, and creation timestamp. This event is critical for detecting malware dropped to disk, ransomware file modifications, data staging for exfiltration, and persistence mechanisms that create files.",
    detailedExplanation: "Sysmon Event 11 provides detailed visibility into file creation activity across the system, capturing when files are created or overwritten along with the process responsible, full file path, and timestamp. This event is invaluable for detecting various attack stages including initial malware deployment when droppers create payloads on disk, ransomware activity that creates encrypted file copies or ransom notes, staging areas where attackers collect data before exfiltration, and persistence mechanisms that create autostart files or scheduled task scripts. The creating process information allows analysts to understand the execution chain that led to file creation - for example, seeing winword.exe create an executable file in a Temp directory is a clear indicator of macro-based malware. File creation in specific directories provides strong threat indicators: executables appearing in user AppData or Temp folders suggest malware, scripts created in Startup folders indicate persistence attempts, and files created on network shares may signal lateral movement or ransomware spreading. Event 11 is particularly effective for ransomware detection when combined with volume-based analytics - a single process creating thousands of files in minutes, especially with suspicious extensions like .encrypted, .locked, or random strings, is characteristic of active ransomware encryption. The event also captures evidence of tools being staged for attacks, such as credential dumpers, privilege escalation exploits, or network scanning utilities being written to disk before execution. By monitoring file creation in system directories like System32 or Windows, security teams can detect DLL planting and other persistence mechanisms. The file path and extension analysis reveals attempts to hide malicious files through double extensions, Unicode characters, or masquerading as legitimate system files with slightly altered names.",
    securityImplications: [
      "Executable files created in Temp or AppData directories by Office applications indicate macro malware",
      "Mass file creation (thousands of files) with encryption-related extensions signals active ransomware",
      "Script files (.ps1, .vbs, .bat) created in Startup folders show persistence mechanism installation",
      "Files created on administrative shares (C$, ADMIN$) indicate lateral movement attempts",
      "Archives (.zip, .rar, .7z) created in staging directories suggest data collection before exfiltration"
    ],
    detectionStrategies: "Configure Sysmon to log file creation in high-value directories while excluding noisy legitimate locations to manage log volume. Alert on executable or script files created in user-writable directories especially Temp, Downloads, and AppData. Implement volume-based detection to identify processes creating abnormally high numbers of files, which indicates ransomware or aggressive malware. Monitor for files created in Startup folders, scheduled tasks directories, and other autostart locations that provide persistence. Flag double-extension files (e.g., invoice.pdf.exe) and files with suspicious Unicode characters designed to deceive users. Track archive file creation combined with subsequent network connections indicating data staging and exfiltration. Correlate Event 11 with process creation (Event 1) to understand what spawned the file-creating process. Create alerts for files created on network shares from user workstations, which may indicate ransomware spreading or lateral movement. Sample Sysmon configurations and SIEM correlation rules for Event 11 will be added in future updates.",
    realWorldExamples: [
      "Ryuk ransomware file creation patterns visible in Event 11 show distinctive encrypted file extensions and ransom note creation across network shares",
      "Dridex banking trojan drops secondary payloads visible in Event 11 logs showing executable creation in AppData by malicious Office macros",
      "APT28 campaigns create archive files in staging directories (visible in Event 11) before exfiltrating stolen data through network connections"
    ],
    relatedEvents: ["1", "3", "23", "15"],
    comparisonNote: "Event 11 logs file creation. Event 23 (File Delete) logs deletions. Event 15 (FileStream Created) logs alternate data streams. Monitor all three for complete file system activity visibility."
  },

  // Sysmon Event 22 - DNS Query
  "22": {
    quickAnswer: "Sysmon Event 22 captures DNS queries made by processes, recording the queried domain name, query result, and the process responsible. This event is essential for detecting command-and-control communications, DNS tunneling, phishing domain contacts, and malicious domain generation algorithms used by malware.",
    detailedExplanation: "Sysmon Event 22 provides visibility into DNS queries performed by processes on the system, capturing the domain name being resolved, the query results, and critically, which process initiated the query. This process-level attribution for DNS queries is not available in standard Windows DNS client logs, making Event 22 uniquely valuable for threat detection. Attackers use DNS for command-and-control communications because DNS traffic is often allowed through firewalls with minimal inspection, making it an attractive channel for malicious communications. Event 22 enables detection of malware beaconing to C2 infrastructure through domain queries, identification of DNS tunneling where data is exfiltrated through DNS requests, and discovery of domain generation algorithm (DGA) usage where malware queries randomly generated domains to find its control server. Security analysts can detect C2 domains by correlating DNS queries with threat intelligence feeds of known malicious domains, identify DGA activity through entropy analysis of queried domain names and observing high query volumes of non-existent domains (NXDOMAIN responses), and spot DNS tunneling through queries to domains with unusual characteristics like very long subdomains or high query frequency to a single domain. The process information reveals which application is performing DNS queries, enabling detection of unusual patterns like Office applications or PDF readers querying domains, which often indicates exploitation or embedded malware. By combining Event 22 with network connection events (Event 3), analysts can trace the complete network activity lifecycle from initial DNS resolution through the subsequent TCP/UDP connections to resolved IP addresses, providing comprehensive visibility into network-based attacks.",
    securityImplications: [
      "DNS queries for known malicious domains indicate active command-and-control communications",
      "High entropy domain names with random characters suggest domain generation algorithms used by malware",
      "Document viewers or Office apps performing DNS queries indicate exploitation or malicious content",
      "Numerous NXDOMAIN responses from a single process reveal DGA-based malware searching for C2 servers",
      "DNS queries with unusually long subdomains or high frequency may indicate DNS tunneling for data exfiltration"
    ],
    detectionStrategies: "Integrate DNS query logs with threat intelligence feeds to automatically flag queries to known malicious domains, C2 infrastructure, and phishing sites. Implement entropy scoring on queried domain names to identify DGA activity characterized by random-looking domain strings. Monitor for processes that don't normally perform DNS queries suddenly resolving domains, especially document viewers and media players. Track the volume of DNS queries per process and alert on unusual spikes or high-frequency query patterns. Alert on queries returning NXDOMAIN responses at high rates, which indicates DGA malware cycling through generated domains. Correlate Event 22 with process creation (Event 1) and network connections (Event 3) to build complete attack timelines from initial execution through DNS resolution to network communication. Maintain allowlists of legitimate high-volume DNS query sources like browsers and cloud sync clients to reduce false positives. Detailed threat intelligence integration guides and sample SIEM queries will be provided in upcoming documentation releases.",
    realWorldExamples: [
      "Qakbot malware generates distinctive DNS query patterns in Event 22 with algorithm-generated domains for C2 resilience",
      "APT1 campaigns used custom DNS tunneling protocols visible in Event 22 with characteristic long subdomain queries for data exfiltration",
      "Emotet infrastructure queries visible in Event 22 show patterns of accessing compromised WordPress sites for command-and-control"
    ],
    relatedEvents: ["3", "1", "5"],
    comparisonNote: "Event 22 shows DNS queries, while Event 3 shows the resulting network connections. Together they provide complete network communication visibility from domain resolution through connection establishment."
  }
};
